# -*- coding: utf-8 -*-
# Copyright 2013 Michael Helmling
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation

"""This module contains the security (user management) related views and helper functions.
"""

from collections import OrderedDict
from functools import wraps
import hashlib
from os.path import join

from flask import jsonify, redirect, render_template, request, session, url_for
import exdb

from . import app

def login_required(f):
    """Use this decorator for views that should only be available to logged-in users."""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if session.get("user") is None:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function


def readUserTable():
    """Parse the user table into an OrderedDict mapping users to hashes.
    
    The file is "users.txt" in the instance directory. It has to be created manually at the moment,
    using the format
    user1|hash1
    user2|hash2
    Hashes are sha256sums as generated by the python hashlib module.
    """
    users = OrderedDict()
    with open(join(exdb.instancePath, 'users.txt'), "rt") as userFile:
        for line in userFile:
            user, hash = line.strip().split("|", 1)
            users[user] = hash
    return users


def writeUserTable(table):
    """Write the user table to the users.txt file."""
    with open(join(exdb.instancePath, 'users.txt'), "wt") as userFile:
        for user, hash in table.items():
            userFile.write("{}|{}\n".format(user, hash))


def passwordHash(password):
    """Compute the hash (sha256 sum) of the given password."""
    return hashlib.sha256(password).hexdigest()


@app.route("/changePassword", methods=["POST"])
@login_required
def changePassword():
    """AJAX handler for changing passwords. Request must have "old" and "new" forms set.
    
    The password change will only succeed if the old password is correct and the new password
    passes some basic changes.
    Returns a JSON object where status="ok" if everything went fine or status="error" else,
    in which case the "message" entry tells what went wrong.
    """
    users = readUserTable()
    old = request.form["oldpw"]
    new = request.form["newpw"]
    if passwordHash(old) != users[session["user"]]:
        return jsonify(status="error", message="current password is wrong")
    if len(new) <= 3:
        return jsonify(status="error", message="new password is too short")
    users[session["user"]] = passwordHash(new)
    writeUserTable(users)
    return jsonify(status="ok")


@app.route("/login", methods=["GET", "POST"])
def login():
    """The login view. Shows user/password filed and (in POST mode) also authenticates."""
    error = None
    if request.method == "POST":
        users = readUserTable()
        user = request.form["username"]
        if user not in users:
            error = "Invalid username"
        elif passwordHash(request.form["password"]) != users[user]:
            error = "Invalid password"
        else:
            session['user'] = user
            return redirect(url_for("exerciselist"))
    return render_template('login.html', error=error)


@app.route('/logout')
@login_required
def logout():
    """The logout view function. Simply removes the user from the session and redirects to login.
    """
    session.pop('user', None)
    return redirect(url_for('login'))
